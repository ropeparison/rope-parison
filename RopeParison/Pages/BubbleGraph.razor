@page "/bubble"
@using RopeParison.Logic.Services;
@using RopeParison.Protocol;
@using System.Linq
@using RopeParison.GraphHelpers
@using RopeParison.SidebarHelpers


<SfMediaQuery @ref="mediaQuery" @bind-ActiveBreakPoint="activeBreakpoint"></SfMediaQuery>
@if (activeBreakpoint == "Small")
{
    isSmall = true;
    bool isInit = false;
    SetSidebarSettings(isInit);
    SetChartSettings(isInit);
}
//else if (activeBreakpoint == "Medium")
else
{
    isSmall = false;
    bool isInit = false;
    SetSidebarSettings(isInit);
    SetChartSettings(isInit);
}

<SfSidebar class="default-sidebar sidebar-width"
    Width="250px"
    Target=".maincontent"
    CloseOnDocumentClick="@sidebarCloseOnDocumentClick"
    EnableGestures="@sidebarEnableGestures"
    ShowBackdrop="@sidebarShowBackdrop"
    Type="@sidebarType"
    @bind-IsOpen="sidebarOpen"
    Changed="() => sidebarService.SidebarSetToggleText(out sidebarToggleText, sidebarOpen, hideOptionsText, showOptionsText)">
        
    <ChildContent>

        <div class="title-header">
            <div class="inline-element">Options </div>
            <SfButton CssClass="right e-flat e-round" @onclick="() => sidebarService.CloseSidebar(out sidebarOpen)" IconCss="fa-solid fa-xmark"></SfButton>
        </div>

        <RP_RopeSelection RopeSelectionChanged="@OnRopeSelectionChanged"></RP_RopeSelection>

        <div class="h5">
            Attribute Selection
        </div>
        <label class="sidebar-subheader sidebar-label">X Axis</label>
        <RP_AttributePicker AttributeSelectionChanged="OnChartXAxisAttributeChanged" initialValue="@chartXAxisRoPrIn.LogicalName" numericOnly="false"></RP_AttributePicker>
        <label class="sidebar-subheader sidebar-label">Y Axis</label>
        <RP_AttributePicker AttributeSelectionChanged="OnChartYAxisAttributeChanged" initialValue="@chartYAxisRoPrIn.LogicalName" numericOnly="true"></RP_AttributePicker>
        <label class="sidebar-subheader sidebar-label">Bubble</label>
        <RP_AttributePicker AttributeSelectionChanged="OnChartBubbleSizeAttributeChanged" initialValue="@chartBubbleSizeRoPrIn.LogicalName" numericOnly="true"></RP_AttributePicker>

    </ChildContent>
</SfSidebar>

<div class="maincontent">
    <div><!--This div seems pointless, but is the only way so far to make the sidebar push feature succesfully push all content in the target div. It only seems to push the first div inside the target div.-->
        <div>
            <h3 class="inline-element">Bubble</h3>            
            <SfButton IsToggle="true" @onclick="() => sidebarService.SidebarToggleOpen(ref sidebarOpen)" CssClass="right e-flat" IsPrimary="true" Content="@sidebarToggleText"></SfButton>
        </div>

        <div class="grid-dimensions">
            @if (chartDisplay)
            {
                <SfChart Width="90%">
                    <RP_ChartTooltip></RP_ChartTooltip>

                    <ChartAxes>
                        @foreach (AxesData axes in chartAxesList)
                        {
                            <ChartAxis Name="@axes.Name" ValueType="@axes.ValueType" Title="@axes.Title" RangePadding="@axes.RangePadding"></ChartAxis>
                        }
                    </ChartAxes>

                    <ChartSeriesCollection >
                        @foreach (SeriesData series in chartSeriesList)
                        {
                            <ChartSeries Type="ChartSeriesType.Bubble"
                                DataSource=@series.DataSource
                                XName=@series.XName
                                YName=@series.YName
                                Size="@series.Size"
                                YAxisName="@series.YAxisName"
                                XAxisName="@series.XAxisName">
                                <ChartMarker>
                                    <RP_ChartDataLabel></RP_ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        }
                    </ChartSeriesCollection>
                </SfChart>
            }
            
        </div>

        <div>
            @if (!isSmall)
            {
                <p></p>
            }
            else
            {
                <p></p>
            }
        </div>
    </div>
</div>

@code {
    //-----------------------------------------------
    //Services
    //-----------------------------------------------
    [Inject]
    private IGraphService graphService { get; set; }
    [Inject]
    private ISidebarService sidebarService { get; set; }
    //-----------------------------------------------
    //ServicesEND
    //-----------------------------------------------

    SfMediaQuery mediaQuery = new SfMediaQuery();
    private string activeBreakpoint = "";
    private bool isSmall = false; //mobile

    //-------------------------------------------------------------
    //Data
    //-------------------------------------------------------------
    private List<RopeDto> ropes = new List<RopeDto>();
    //-------------------------------------------------------------
    //DataEND
    //-------------------------------------------------------------

    //---------------------------------------------------------------------------------
    //Chart
    //---------------------------------------------------------------------------------
    private bool chartDisplay = true;

    private List<AxesData> chartAxesList = new List<AxesData>();
    private List<SeriesData> chartSeriesList = new List<SeriesData>();

    private RopePropertyInformationsDto ropePropertyInformations = new RopePropertyInformationsDto();
    private RopePropertyInformationDto chartXAxisRoPrIn = new RopePropertyInformationDto();
    private RopePropertyInformationDto chartYAxisRoPrIn = new RopePropertyInformationDto();
    private RopePropertyInformationDto chartBubbleSizeRoPrIn = new RopePropertyInformationDto();
    //---------------------------------------------------------------------------------
    //ChartEND
    //---------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------
    //Sidebar
    //------------------------------------------------------------------------------------
    private bool sidebarOpen = false;
    private bool sidebarCloseOnDocumentClick = false;
    private bool sidebarEnableGestures = false; //EnableGestures is things like swipe to close. Swipe to close is annoying on desktop when adjusting range sliders.
    private bool sidebarShowBackdrop = false;
    private SidebarType sidebarType = SidebarType.Auto;

    private static readonly string SHOW_OPTIONS = "Show Options";
    private static readonly string HIDE_OPTIONS = "Hide Options";
    private static readonly string OPTIONS = "Options";
    private string showOptionsText = "";
    private string hideOptionsText = "";
    private string sidebarToggleText = OPTIONS;
    //------------------------------------------------------------------------------------
    //SidebarEND
    //------------------------------------------------------------------------------------

    //**********************************************************************************************************************************************************************************************
    //DeclarationsEND
    //**********************************************************************************************************************************************************************************************


    protected override void OnInitialized()
    {
        bool isInit = true;
        SetSidebarSettings(isInit);
        SetChartSettings(isInit);

        GetChartData();
    }


    //---------------------------------------------------------------------------------
    //Chart
    //---------------------------------------------------------------------------------
    private void SetChartSettings(bool isInit)
    {
        if (isInit)
        {
            chartXAxisRoPrIn = ropePropertyInformations.StaticElongation80kgOneStrand;
            chartYAxisRoPrIn = ropePropertyInformations.DynamicElongation80kgOneStrand;
            chartBubbleSizeRoPrIn = ropePropertyInformations.ImpactForce80kgOneStrand;
        }
    }

    private void OnChartXAxisAttributeChanged(RopePropertyInformationDto roPrIn)
    {
        chartXAxisRoPrIn = roPrIn;
        GetChartData();
    }
    private void OnChartYAxisAttributeChanged(RopePropertyInformationDto roPrIn)
    {
        chartYAxisRoPrIn = roPrIn;
        GetChartData();
    }
    private void OnChartBubbleSizeAttributeChanged(RopePropertyInformationDto roPrIn)
    {
        chartBubbleSizeRoPrIn = roPrIn;
        GetChartData();
    }

    private async void GetChartData()
    {
        chartDisplay = false;
        StateHasChanged(); //Totally remove chart from DOM. It does not render properly (various problems) if axes/data are changed. Needs to be removed and re-added, so it re-renders initially.
        await Task.Delay(1); //Token task delay required to allow component to re-render and remove chart from DOM.

        chartAxesList.Clear();
        chartSeriesList.Clear();

        chartAxesList.Add(
            new AxesData
            {
                Name = "XAxis1",
                ValueType = graphService.GetAxisValueType(chartXAxisRoPrIn.Type),
                Title = chartXAxisRoPrIn.NameUnit,
                RangePadding = ChartRangePadding.Additional,
            }
        );
        chartAxesList.Add(
            new AxesData
            {
                Name = "YAxis1",
                ValueType = graphService.GetAxisValueType(chartYAxisRoPrIn.Type),
                Title = chartYAxisRoPrIn.NameUnit,
                RangePadding = ChartRangePadding.Additional,
            }
        );

        var xDouble = false;
        var xInt = false;
        var xNumeric = false;
        var yDouble = false;
        var yInt = false;
        var yNumeric = false;
        var bubbleSizeDouble = false;
        var bubbleSizeInt = false;
        var bubbleSizeNumeric = false;
        if (chartXAxisRoPrIn.Type == RopePropertyInformationType.Double)
            xDouble = true;
        if (chartXAxisRoPrIn.Type == RopePropertyInformationType.Int)
            xInt = true;
        if (xDouble || xInt)
            xNumeric = true;
        if (chartYAxisRoPrIn.Type == RopePropertyInformationType.Double)
            yDouble = true;
        if (chartYAxisRoPrIn.Type == RopePropertyInformationType.Int)
            yInt = true;
        if (yDouble || yInt)
            yNumeric = true;
        if (chartBubbleSizeRoPrIn.Type == RopePropertyInformationType.Double)
            bubbleSizeDouble = true;
        if (chartBubbleSizeRoPrIn.Type == RopePropertyInformationType.Int)
            bubbleSizeInt = true;
        if (bubbleSizeDouble || bubbleSizeInt)
            bubbleSizeNumeric = true;

        foreach (var rope in ropes)
        {
            graphService.SetXYBubblePlotValues(true, rope, xDouble, xInt, yDouble, yInt, bubbleSizeDouble, bubbleSizeInt, chartXAxisRoPrIn, chartYAxisRoPrIn, chartBubbleSizeRoPrIn);

            rope.InformationText = graphService.RopeInformationText(true, rope, chartXAxisRoPrIn, chartYAxisRoPrIn, chartBubbleSizeRoPrIn);
        }

        chartSeriesList.Add(
            new SeriesData
            {
                DataSource = ropes,
                XName = xNumeric ? "XDouble" : "XString",
                YName = yNumeric ? "YDouble" : "YString",
                Size = bubbleSizeNumeric ? "BubbleSizeDouble" : "BubbleSizeDouble",
                XAxisName = "XAxis1",
                YAxisName = "YAxis1",
            }
        );

        chartDisplay = true;
        StateHasChanged();
    }

    //---------------------------------------------------------------------------------
    //ChartEND
    //---------------------------------------------------------------------------------

    //---------------------------------------------------------------------------------
    //Sidebar
    //---------------------------------------------------------------------------------
    private void SetSidebarSettings(bool isInit)
    {
        sidebarService.SetSidebarSettings(isSmall, isInit, ref sidebarOpen, out sidebarCloseOnDocumentClick, out sidebarEnableGestures, out sidebarShowBackdrop, out sidebarType, out showOptionsText, out hideOptionsText, in OPTIONS, in SHOW_OPTIONS, in HIDE_OPTIONS, out sidebarToggleText);
    }
    //---------------------------------------------------------------------------------
    //SidebarEND
    //---------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------
    //RopeInclusion
    //----------------------------------------------------------------------------------
    private void OnRopeSelectionChanged(List<RopeDto> ropeSelection)
    {
        ropes = ropeSelection;
        GetChartData();
    }
    //----------------------------------------------------------------------------------
    //RopeInclusionEND
    //----------------------------------------------------------------------------------

}

<style>



</style>